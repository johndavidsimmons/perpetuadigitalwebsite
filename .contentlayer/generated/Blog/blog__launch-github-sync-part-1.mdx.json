{
  "title": "Syncing Adobe Launch/Tags with Github - Part 1: Setup",
  "date": "2023-04-18T00:00:00.000Z",
  "tags": [
    "adobe launch",
    "adobe tags",
    "javascript",
    "github",
    "automation"
  ],
  "draft": false,
  "summary": "How to use Github to build, sync, & deploy custom code directly to Adobe Launch/Tags",
  "body": {
    "raw": "\n## Down the rabbit hole\n\nI originally just wanted to sync one github file with one data element and bake some real\nversion control into my more complex custom code data elements. Well, I did that, but I also accidentially\nmade it possible to universally sync a single github file with multiple data elements across just as many properties.\n\nSo why would you want to do this? Well, you might manage dozens of properties and hate having to make the\nsame change in multiple places. Maybe you have some complicated code that augments a 3rd party library\nwith web data (think sending marketing data along with chat sessions), I'm sure if you manage more than one\nproperty or work with a lot of custom code, you've though about setting this up from time to time. I fall into both of those categories.\nPlus, its just a cool integration that I figured _someone_ would do eventually, so why not me? A note before we get into it:\n\n**For the time being, everything here should be considered proof of concept!\nI am not a licensed financial advisor! Your mileage may vary! Proceed with caution!**\n\n![penguin crossing](https://images.ctfassets.net/on47yk52ubpi/eFoE7wCE4YD7oypDX0YK7/e94e6ec19b3261ada71a8667e17b406e/caution_sign.jpg)\n\n<figure>\n  <figcaption>Does anyone know where this is?!</figcaption>\n</figure>\n\n## So how exactly does it work?\n\nMore hooks than a bait shop, more callbacks than a...teenager with a busted voicemail? I don't know, I couldn't think of anything...\nHere is what happens:\n\n- There is an initial setup of the data elements in Launch and files in Github. These things must first exist before we can sync them.\n- A Github push webhook sends a push event to an AWS API gateway. I'll call this **Github Webhook Gateway**\n- **Github Webhook Gateway** does some checks and says, _\"yep this data needs to sync with Launch\"_ and invokes a lambda called **Extract Github Data**\n- **Extract Github Data** pulls the actual file content from Github and formats it for the [Reactor API](https://experienceleague.adobe.com/docs/experience-platform/tags/api/overview.html).\n- Once the new file content is ready to be sent to Launch, **Extract Github Data** triggers another lambda called **Build Launch Development Library**\n- **Build Launch Development Library** takes the changes, incorporates them into a library, and builds a library.\n- Separately defined [Launch callback hooks](https://experienceleague.adobe.com/docs/experience-platform/tags/api/endpoints/callbacks.html?lang=en) listen for libraries built via Github changes and automatically publish them through dev > staging > prod.\n  <br></br>\n  <br></br>\n  <div style={{ border: '1px solid black' }}>\n    ![aws\n    diagram](https://images.ctfassets.net/on47yk52ubpi/1veno3QJdFZRF6ra2trhmR/7ab63da00a6c3d16174b49ddd5b75ae3/2d_launch_github_sync_diagram_cropped.png)\n  </div>\n\n<figure>\n  <figcaption>Once the initial setup is done, this is the flow!</figcaption>\n</figure>\n\n---\n\n## Launch Setup\n\nBefore I can automatically sync data elements with Github files, those data elements need to _exist_ in their respective Launch properties _first_.\nThis is necessary because I need to incorporate their data element ID(s) into Github. You can get the data element ID from the URL when working on a data element.\n\nPro tip for those going further:\nthere's a lot of Launch component IDs used in this project: data elements, libraries, environments, etc. The first 2 letters of the ID indicate\nwhat type of ID it is, so when looking at the URL of a data element, the property ID of that data element will start with `PR...`, the\ndata element ID will start with `DE...`, etc.\n\n![DATA ELEMENT URL](https://images.ctfassets.net/on47yk52ubpi/6IowiCe5E01eRu7thTD1aj/5255612b327f66c4f625eeb1b44a613d/DATAELEMENTURL.png)\n\n<figure>\n  <figcaption>You can find your data element IDs in the URL when editing them</figcaption>\n</figure>\n\n## Github File Setup\n\nHere is the folder structure for my repo. I would consider this my master property settings. Its just data elements for now, but\nin the future there's no reason rules and other components can't also be included:\n\n```bash\n-repo\n    - dataelements\n        - dataelement1.js\n        - dataelement2.js\n        - etc etc\n    - rules\n        - rule files here...\n```\n\n[Sample Launch Property Repo](https://github.com/perpetua-digital/launch-property)\n\nEach Github file has the data element ID(s) it should sync with as a comment on the first line. The lambda extracts these IDs and uses them in the API calls that update the data elements in Launch.\nI'm not too worried about committing these IDs since, in practice, this will be a private repo _and_ a minified Launch library strips comments out of custom code anyway. Github push\nwebhooks are also authenticated via a [Github Personal Access token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token).\n\n```javascript\n// DE123456789... DE987654321...\n// [GITHUB] url\n// The github file should be exactly what should be in the custom code data element\nreturn `${window.location.protocol}//${window.location.host}${window.location.pathname}`\n```\n\n## The future...\n\nI am at a bit of a crossroads as to how I want to get this out to the people. Here's my options:\n\n1. Make all source code public and basically make this an open source project. I would use this blog to explain how each part works.\n   It _is_ complex and I don't think the average Launch/Tags user would take the time to set it up. Plus, implementing requires enterprise tools like AWS that some people might not be comfortable working in...\n2. Keep the code behind the scenes and build this out into a full fledged app with [App Builder](https://business.adobe.com/products/experience-manager/developer-app-builder.html). Easier to implement for\n   people, but won't be free. This would be a ton of work for me and I do still have a day job.\n\nShoot me a message or comment what you think I should do!\n\n## Demo video\n\nThis is the same video I previously posted on LinkedIn, but now you know why I have the data element ID\nin a comment _and_ notice that it doesn't come out as part of the data element on a website.\n\n<ReactPlayer url=\"https://www.youtube.com/watch?v=ppZrylP4Mn0\" />\n",
    "code": "var Component=(()=>{var h=Object.create;var s=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var b=(n,a)=>()=>(a||n((a={exports:{}}).exports,a),a.exports),g=(n,a)=>{for(var i in a)s(n,i,{get:a[i],enumerable:!0})},c=(n,a,i,t)=>{if(a&&typeof a==\"object\"||typeof a==\"function\")for(let o of p(a))!m.call(n,o)&&o!==i&&s(n,o,{get:()=>a[o],enumerable:!(t=d(a,o))||t.enumerable});return n};var f=(n,a,i)=>(i=n!=null?h(u(n)):{},c(a||!n||!n.__esModule?s(i,\"default\",{value:n,enumerable:!0}):i,n)),w=n=>c(s({},\"__esModule\",{value:!0}),n);var r=b((D,l)=>{l.exports=_jsx_runtime});var v={};g(v,{default:()=>N,frontmatter:()=>y});var e=f(r()),y={title:\"Syncing Adobe Launch/Tags with Github - Part 1: Setup\",date:\"2023-04-18\",tags:[\"adobe launch\",\"adobe tags\",\"javascript\",\"github\",\"automation\"],draft:!1,summary:\"How to use Github to build, sync, & deploy custom code directly to Adobe Launch/Tags\"};function k(n={}){let{wrapper:a}=n.components||{};return a?(0,e.jsx)(a,Object.assign({},n,{children:(0,e.jsx)(i,{})})):i();function i(){let t=Object.assign({h2:\"h2\",a:\"a\",span:\"span\",p:\"p\",em:\"em\",strong:\"strong\",img:\"img\",ul:\"ul\",li:\"li\",hr:\"hr\",code:\"code\",pre:\"pre\",ol:\"ol\"},n.components),{ReactPlayer:o}=t;return o||I(\"ReactPlayer\",!0,\"115:1-115:66\"),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsxs)(t.h2,{id:\"down-the-rabbit-hole\",children:[(0,e.jsx)(t.a,{href:\"#down-the-rabbit-hole\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Down the rabbit hole\"]}),(0,e.jsx)(t.p,{children:\"I originally just wanted to sync one github file with one data element and bake some real version control into my more complex custom code data elements. Well, I did that, but I also accidentially made it possible to universally sync a single github file with multiple data elements across just as many properties.\"}),(0,e.jsxs)(t.p,{children:[\"So why would you want to do this? Well, you might manage dozens of properties and hate having to make the same change in multiple places. Maybe you have some complicated code that augments a 3rd party library with web data (think sending marketing data along with chat sessions), I'm sure if you manage more than one property or work with a lot of custom code, you've though about setting this up from time to time. I fall into both of those categories. Plus, its just a cool integration that I figured \",(0,e.jsx)(t.em,{children:\"someone\"}),\" would do eventually, so why not me? A note before we get into it:\"]}),(0,e.jsx)(t.p,{children:(0,e.jsx)(t.strong,{children:\"For the time being, everything here should be considered proof of concept! I am not a licensed financial advisor! Your mileage may vary! Proceed with caution!\"})}),(0,e.jsx)(t.p,{children:(0,e.jsx)(t.img,{alt:\"penguin crossing\",src:\"https://images.ctfassets.net/on47yk52ubpi/eFoE7wCE4YD7oypDX0YK7/e94e6ec19b3261ada71a8667e17b406e/caution_sign.jpg\"})}),(0,e.jsx)(\"figure\",{children:(0,e.jsx)(\"figcaption\",{children:\"Does anyone know where this is?!\"})}),(0,e.jsxs)(t.h2,{id:\"so-how-exactly-does-it-work\",children:[(0,e.jsx)(t.a,{href:\"#so-how-exactly-does-it-work\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"So how exactly does it work?\"]}),(0,e.jsx)(t.p,{children:\"More hooks than a bait shop, more callbacks than a...teenager with a busted voicemail? I don't know, I couldn't think of anything... Here is what happens:\"}),(0,e.jsxs)(t.ul,{children:[(0,e.jsx)(t.li,{children:\"There is an initial setup of the data elements in Launch and files in Github. These things must first exist before we can sync them.\"}),(0,e.jsxs)(t.li,{children:[\"A Github push webhook sends a push event to an AWS API gateway. I'll call this \",(0,e.jsx)(t.strong,{children:\"Github Webhook Gateway\"})]}),(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"Github Webhook Gateway\"}),\" does some checks and says, \",(0,e.jsx)(t.em,{children:'\"yep this data needs to sync with Launch\"'}),\" and invokes a lambda called \",(0,e.jsx)(t.strong,{children:\"Extract Github Data\"})]}),(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"Extract Github Data\"}),\" pulls the actual file content from Github and formats it for the \",(0,e.jsx)(t.a,{href:\"https://experienceleague.adobe.com/docs/experience-platform/tags/api/overview.html\",children:\"Reactor API\"}),\".\"]}),(0,e.jsxs)(t.li,{children:[\"Once the new file content is ready to be sent to Launch, \",(0,e.jsx)(t.strong,{children:\"Extract Github Data\"}),\" triggers another lambda called \",(0,e.jsx)(t.strong,{children:\"Build Launch Development Library\"})]}),(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"Build Launch Development Library\"}),\" takes the changes, incorporates them into a library, and builds a library.\"]}),(0,e.jsxs)(t.li,{children:[\"Separately defined \",(0,e.jsx)(t.a,{href:\"https://experienceleague.adobe.com/docs/experience-platform/tags/api/endpoints/callbacks.html?lang=en\",children:\"Launch callback hooks\"}),\" listen for libraries built via Github changes and automatically publish them through dev > staging > prod.\",\" \",(0,e.jsx)(\"br\",{}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(\"div\",{style:{border:\"1px solid black\"},children:(0,e.jsx)(t.p,{children:(0,e.jsx)(t.img,{alt:`aws\ndiagram`,src:\"https://images.ctfassets.net/on47yk52ubpi/1veno3QJdFZRF6ra2trhmR/7ab63da00a6c3d16174b49ddd5b75ae3/2d_launch_github_sync_diagram_cropped.png\"})})})]})]}),(0,e.jsx)(\"figure\",{children:(0,e.jsx)(\"figcaption\",{children:\"Once the initial setup is done, this is the flow!\"})}),(0,e.jsx)(t.hr,{}),(0,e.jsxs)(t.h2,{id:\"launch-setup\",children:[(0,e.jsx)(t.a,{href:\"#launch-setup\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Launch Setup\"]}),(0,e.jsxs)(t.p,{children:[\"Before I can automatically sync data elements with Github files, those data elements need to \",(0,e.jsx)(t.em,{children:\"exist\"}),\" in their respective Launch properties \",(0,e.jsx)(t.em,{children:\"first\"}),\". This is necessary because I need to incorporate their data element ID(s) into Github. You can get the data element ID from the URL when working on a data element.\"]}),(0,e.jsxs)(t.p,{children:[\"Pro tip for those going further: there's a lot of Launch component IDs used in this project: data elements, libraries, environments, etc. The first 2 letters of the ID indicate what type of ID it is, so when looking at the URL of a data element, the property ID of that data element will start with \",(0,e.jsx)(t.code,{children:\"PR...\"}),\", the data element ID will start with \",(0,e.jsx)(t.code,{children:\"DE...\"}),\", etc.\"]}),(0,e.jsx)(t.p,{children:(0,e.jsx)(t.img,{alt:\"DATA ELEMENT URL\",src:\"https://images.ctfassets.net/on47yk52ubpi/6IowiCe5E01eRu7thTD1aj/5255612b327f66c4f625eeb1b44a613d/DATAELEMENTURL.png\"})}),(0,e.jsx)(\"figure\",{children:(0,e.jsx)(\"figcaption\",{children:\"You can find your data element IDs in the URL when editing them\"})}),(0,e.jsxs)(t.h2,{id:\"github-file-setup\",children:[(0,e.jsx)(t.a,{href:\"#github-file-setup\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Github File Setup\"]}),(0,e.jsx)(t.p,{children:\"Here is the folder structure for my repo. I would consider this my master property settings. Its just data elements for now, but in the future there's no reason rules and other components can't also be included:\"}),(0,e.jsx)(t.pre,{className:\"language-bash\",children:(0,e.jsxs)(t.code,{className:\"code-highlight language-bash\",children:[(0,e.jsx)(t.span,{className:\"code-line\",children:`-repo\n`}),(0,e.jsx)(t.span,{className:\"code-line\",children:`    - dataelements\n`}),(0,e.jsx)(t.span,{className:\"code-line\",children:`        - dataelement1.js\n`}),(0,e.jsx)(t.span,{className:\"code-line\",children:`        - dataelement2.js\n`}),(0,e.jsx)(t.span,{className:\"code-line\",children:`        - etc etc\n`}),(0,e.jsx)(t.span,{className:\"code-line\",children:`    - rules\n`}),(0,e.jsxs)(t.span,{className:\"code-line\",children:[\"        - rule files here\",(0,e.jsx)(t.span,{className:\"token punctuation\",children:\"..\"}),`.\n`]})]})}),(0,e.jsx)(t.p,{children:(0,e.jsx)(t.a,{href:\"https://github.com/perpetua-digital/launch-property\",children:\"Sample Launch Property Repo\"})}),(0,e.jsxs)(t.p,{children:[\"Each Github file has the data element ID(s) it should sync with as a comment on the first line. The lambda extracts these IDs and uses them in the API calls that update the data elements in Launch. I'm not too worried about committing these IDs since, in practice, this will be a private repo \",(0,e.jsx)(t.em,{children:\"and\"}),\" a minified Launch library strips comments out of custom code anyway. Github push webhooks are also authenticated via a \",(0,e.jsx)(t.a,{href:\"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token\",children:\"Github Personal Access token\"}),\".\"]}),(0,e.jsx)(t.pre,{className:\"language-javascript\",children:(0,e.jsxs)(t.code,{className:\"code-highlight language-javascript\",children:[(0,e.jsxs)(t.span,{className:\"code-line\",children:[(0,e.jsx)(t.span,{className:\"token comment\",children:\"// DE123456789... DE987654321...\"}),`\n`]}),(0,e.jsxs)(t.span,{className:\"code-line\",children:[(0,e.jsx)(t.span,{className:\"token comment\",children:\"// [GITHUB] url\"}),`\n`]}),(0,e.jsxs)(t.span,{className:\"code-line\",children:[(0,e.jsx)(t.span,{className:\"token comment\",children:\"// The github file should be exactly what should be in the custom code data element\"}),`\n`]}),(0,e.jsxs)(t.span,{className:\"code-line\",children:[(0,e.jsx)(t.span,{className:\"token control-flow keyword\",children:\"return\"}),\" \",(0,e.jsxs)(t.span,{className:\"token template-string\",children:[(0,e.jsx)(t.span,{className:\"token string template-punctuation\",children:\"`\"}),(0,e.jsxs)(t.span,{className:\"token interpolation\",children:[(0,e.jsx)(t.span,{className:\"token punctuation interpolation-punctuation\",children:\"${\"}),(0,e.jsx)(t.span,{className:\"token dom variable\",children:\"window\"}),(0,e.jsx)(t.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(t.span,{className:\"token property-access\",children:\"location\"}),(0,e.jsx)(t.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(t.span,{className:\"token property-access\",children:\"protocol\"}),(0,e.jsx)(t.span,{className:\"token punctuation interpolation-punctuation\",children:\"}\"})]}),(0,e.jsx)(t.span,{className:\"token string\",children:\"//\"}),(0,e.jsxs)(t.span,{className:\"token interpolation\",children:[(0,e.jsx)(t.span,{className:\"token punctuation interpolation-punctuation\",children:\"${\"}),(0,e.jsx)(t.span,{className:\"token dom variable\",children:\"window\"}),(0,e.jsx)(t.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(t.span,{className:\"token property-access\",children:\"location\"}),(0,e.jsx)(t.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(t.span,{className:\"token property-access\",children:\"host\"}),(0,e.jsx)(t.span,{className:\"token punctuation interpolation-punctuation\",children:\"}\"})]}),(0,e.jsxs)(t.span,{className:\"token interpolation\",children:[(0,e.jsx)(t.span,{className:\"token punctuation interpolation-punctuation\",children:\"${\"}),(0,e.jsx)(t.span,{className:\"token dom variable\",children:\"window\"}),(0,e.jsx)(t.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(t.span,{className:\"token property-access\",children:\"location\"}),(0,e.jsx)(t.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(t.span,{className:\"token property-access\",children:\"pathname\"}),(0,e.jsx)(t.span,{className:\"token punctuation interpolation-punctuation\",children:\"}\"})]}),(0,e.jsx)(t.span,{className:\"token string template-punctuation\",children:\"`\"})]}),`\n`]})]})}),(0,e.jsxs)(t.h2,{id:\"the-future\",children:[(0,e.jsx)(t.a,{href:\"#the-future\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"The future...\"]}),(0,e.jsx)(t.p,{children:\"I am at a bit of a crossroads as to how I want to get this out to the people. Here's my options:\"}),(0,e.jsxs)(t.ol,{children:[(0,e.jsxs)(t.li,{children:[\"Make all source code public and basically make this an open source project. I would use this blog to explain how each part works. It \",(0,e.jsx)(t.em,{children:\"is\"}),\" complex and I don't think the average Launch/Tags user would take the time to set it up. Plus, implementing requires enterprise tools like AWS that some people might not be comfortable working in...\"]}),(0,e.jsxs)(t.li,{children:[\"Keep the code behind the scenes and build this out into a full fledged app with \",(0,e.jsx)(t.a,{href:\"https://business.adobe.com/products/experience-manager/developer-app-builder.html\",children:\"App Builder\"}),\". Easier to implement for people, but won't be free. This would be a ton of work for me and I do still have a day job.\"]})]}),(0,e.jsx)(t.p,{children:\"Shoot me a message or comment what you think I should do!\"}),(0,e.jsxs)(t.h2,{id:\"demo-video\",children:[(0,e.jsx)(t.a,{href:\"#demo-video\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Demo video\"]}),(0,e.jsxs)(t.p,{children:[\"This is the same video I previously posted on LinkedIn, but now you know why I have the data element ID in a comment \",(0,e.jsx)(t.em,{children:\"and\"}),\" notice that it doesn't come out as part of the data element on a website.\"]}),(0,e.jsx)(o,{url:\"https://www.youtube.com/watch?v=ppZrylP4Mn0\"})]})}}var N=k;function I(n,a,i){throw new Error(\"Expected \"+(a?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\"+(i?\"\\nIt\\u2019s referenced in your code at `\"+i+\"` in `/Users/john/Desktop/code/perpetuadigitalwebsite/_mdx_bundler_entry_point-495458b6-cbff-4ffa-b66c-159671a74969.mdx`\":\"\"))}return w(v);})();\n;return Component;"
  },
  "_id": "blog/launch-github-sync-part-1.mdx",
  "_raw": {
    "sourceFilePath": "blog/launch-github-sync-part-1.mdx",
    "sourceFileName": "launch-github-sync-part-1.mdx",
    "sourceFileDir": "blog",
    "contentType": "mdx",
    "flattenedPath": "blog/launch-github-sync-part-1"
  },
  "type": "Blog",
  "readingTime": {
    "text": "5 min read",
    "minutes": 4.545,
    "time": 272700,
    "words": 909
  },
  "slug": "launch-github-sync-part-1",
  "toc": [
    {
      "value": "Down the rabbit hole",
      "url": "#down-the-rabbit-hole",
      "depth": 2
    },
    {
      "value": "So how exactly does it work?",
      "url": "#so-how-exactly-does-it-work",
      "depth": 2
    },
    {
      "value": "Launch Setup",
      "url": "#launch-setup",
      "depth": 2
    },
    {
      "value": "Github File Setup",
      "url": "#github-file-setup",
      "depth": 2
    },
    {
      "value": "The future...",
      "url": "#the-future",
      "depth": 2
    },
    {
      "value": "Demo video",
      "url": "#demo-video",
      "depth": 2
    }
  ]
}