{
  "title": "Automatically adding query parameters to Amplitude Events with Adobe Launch & Amplitude plugins",
  "date": "2023-03-22T00:00:00.000Z",
  "tags": [
    "adobe launch",
    "amplitude",
    "query parameters"
  ],
  "draft": false,
  "summary": "How to use Amplitude plugin functions to automatically collect data",
  "body": {
    "raw": "\n## Praise for the Amplitude Launch Extension\n\nI‚Äôve been working on a few Amplitude deployments via Launch (aka data collection tags) lately and I am a huge fan of the \nAmplitude V2 extension. It does everything the [Amplitude Browser SDK](https://www.docs.developers.amplitude.com/data/sdks/typescript-browser/)does and the documentation links in it are all correct. \nThere are even code samples within the custom code sections! This fact alone saved me a ton of time when setting up my \ndeployment and writing the following plugin.\n\n\n![amplitude extension](https://images.ctfassets.net/on47yk52ubpi/81zB2SvWTPFJQkpbAHz1l/791c5af64382aafcd0a7f27945817c25/1_Qf2Lt8erW8Dm8GwaBzUC8Q.webp)\n<figure>\n<figcaption>Props (No Adobe pun intended) to whoever made this. My only request is being able to have different API keys based on Launch environment similar to the Acronym Gtag extension.</figcaption>\n</figure>\n\nTracking an event with the Amplitude extension is pretty straight-forward. After selecting you conditions & criteria in a rule, \nyou can add the *Track Event* action to send *events* and *event properties* to Amplitude.\n\n\n![amplitude track event](https://images.ctfassets.net/on47yk52ubpi/KydH5D4n8eEVJrR4F2Poy/41d8964c45fb202a043b9522f8dae86b/1_oSrSiMky9Cfaasuj3QK2Fw.webp)\n<figure>\n<figcaption>Tracking a fake event and sending along some UTM data</figcaption>\n</figure>\n\nAs you can see above, with any event you can manually add properties you want to send along with it. \nThat‚Äôs all fine and good, but I know I‚Äôm going to need to send any and all UTMs with every Amplitude event. \nEnter [Amplitude Plugins.](https://www.docs.developers.amplitude.com/data/sdks/typescript-browser/#plugins)\n\n*Note: I know Amplitude grabs UTMs automatically for attribution. However, I like seeing them on my events also. \nYou could also use the same plugin code I use here to automatically grab any param(s) you need and have them \nautomatically added every event.*\n\n## Writing and Adding Amplitude Plugins in Launch\n\nFor the time being, I am putting my Amplitude Plugins in the same rule where I *Initialize* Amplitude. \nI like the idea of having all the setup type stuff in the same rule. \nAlso, I don‚Äôt know specifically plugins should go. Either way, this seems to work üòÅ\n\n![launch rule amplitude](https://images.ctfassets.net/on47yk52ubpi/1XputFNi1DghlLnmkF64hB/9c343e5838db273e3e4a761edfc843a1/1_LDgRWveBjthMrfIv0R2txg.webp)\n<figure>\n<figcaption>I add the plugin prior to initialization to ensure it is added to all events</figcaption>\n</figure>\n\nInside the Add Plugin Action, click *Plugin Code*, and you‚Äôll be treated to a nice commented out code \nexample and link to documentation. Very helpful!\n\n![amplitude launch add plugin](https://images.ctfassets.net/on47yk52ubpi/5dLSG39hxI0hI6ABaMSjIf/d602610e5aaf36c91ad672a73eec3fd1/1_nGRFbv3U1bMNfw39MpStWg.webp)\n<figure>\n<figcaption>The little indicator lights turn green when there is code in there!</figcaption>\n</figure>\n\n![amplitude sample code](https://images.ctfassets.net/on47yk52ubpi/1mTwlsW3DBb9jh3LR0p6ZJ/4f8561a674b379e55d18274f85fb6e4a/1__bzmJJNp-ijddojxpuh_NA.webp)\n<figure>\n<figcaption>Example plugin code gives you an idea of how things work!</figcaption>\n</figure>\n\n![amplitude plugin code launch](https://images.ctfassets.net/on47yk52ubpi/1utwVdiVrILYCDZnv6M2LY/70c6a7726a99c6169eacce31a0a80fdb/1_ret6ePCS2265jrbaCBpG0w.webp)\n<figure>\n<figcaption>My plugin for automatically collecting UTM parameters</figcaption>\n</figure>\n\nHere is what‚Äôs going on line by line\n\n2. give the plugin a name :)\n\n3. Specify the type of plugin it is. This one is an enrichment plugin.\n\n4. The setup function takes the Amplitude config, but since I don‚Äôt need to manipulate that I‚Äôm just doing a debug log and returning.\n\n8. The execute function takes the Amplitude event as a parameter. It will look at every event that passes through Amplitude. If I needed to limit this plugin to only effect certain kinds of events (i.e. only pageviews and not logins, etc.) I could do that inside the function on the next line.\n\n9. Grab all the query parameters of the current URL\n\n10. Of the existing query parameters, filter out the non-UTM ones, and create and object of the ones that contain utm in their key\n\n```javascript\n// www.example.com?utm_content=ABC&foo=bar&utm_campaign=XYZ\n\nconst params = new URLSearchParams(window.location.search)\n// Array.from(params) = [[\"utm_content\", \"abc\"], [\"foo\", \"bar\"], [\"utm_campaign\", \"XYZ\"]]\n\n// remove non utms and create object\nconst utms = Object.fromEntries(Array.from(params).filter( ([key]) => key.includes(\"utm\")))\n// utms = { utm_content: \"ABC\", utm_campaign: \"XYZ\" }\n```\n\n11. Combines any existing properties the event has with the UTM ones. If I didn‚Äôt do this, and just assigned the utm object as the event properties, it would overwrite everything that was already in there and I don‚Äôt want that. I do get a warning from Launch here for using the spread operator. I don‚Äôt know how much of an issue that will be, but its something I will keep my eye on.\n\n12. Return the event\n\n![amplitude console logs](https://images.ctfassets.net/on47yk52ubpi/23brJur5BvMkD4ZOR4cc9x/2c7add549970fffee760c58ff6941424/1_cqiyjuy91GeG6oEsA5AwJg.webp)\n<figure>\n<figcaption>Logs from adding the plugin</figcaption>\n</figure>\n\n## In Action\n\nYou can see what Amplitude is doing using the [Amplitude Event Explorer Chrome Extension](https://chrome.google.com/webstore/detail/amplitude-event-explorer/acehfjhnmhbmgkedjmjlobpgdicnhkbp) (Firefox version please!)\n\nIn this case you can see when I track *myfakevent* event, the utm parameters are added, \nbut the foo parameter is not! The other data from *myfakeevent* is also being passed because \nI am merging the existing event data with the utm data in the plugin code.\n\n![amplitude debugger](https://images.ctfassets.net/on47yk52ubpi/4woz742PpUgz5tQ1ID8Lfj/6145dffada563300d14d3a7fbe778616/1_fELTrwJP_OD6XTyMLoRjew.webp)\n<figure>\n<figcaption>The JS console represents what the track event Launch action does.</figcaption>\n</figure>\n\nI am loving the plugin functionality so far and look forward to using it to make my life easier. \nAlso, based on some of the _satellite logs that the extension spits out, I suspect the Launch extension itself \nis heavily integrated with Amplitude plugins. \nIf anyone from Amplitude reads this, can you confirm or deny?",
    "code": "var Component=(()=>{var d=Object.create;var c=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var g=(t,a)=>()=>(a||t((a={exports:{}}).exports,a),a.exports),f=(t,a)=>{for(var i in a)c(t,i,{get:a[i],enumerable:!0})},l=(t,a,i,n)=>{if(a&&typeof a==\"object\"||typeof a==\"function\")for(let s of p(a))!u.call(t,s)&&s!==i&&c(t,s,{get:()=>a[s],enumerable:!(n=h(a,s))||n.enumerable});return t};var k=(t,a,i)=>(i=t!=null?d(m(t)):{},l(a||!t||!t.__esModule?c(i,\"default\",{value:t,enumerable:!0}):i,t)),y=t=>l(c({},\"__esModule\",{value:!0}),t);var r=g((I,o)=>{o.exports=_jsx_runtime});var v={};f(v,{default:()=>N,frontmatter:()=>w});var e=k(r()),w={title:\"Automatically adding query parameters to Amplitude Events with Adobe Launch & Amplitude plugins\",date:\"2023-03-22\",tags:[\"adobe launch\",\"amplitude\",\"query parameters\"],draft:!1,summary:\"How to use Amplitude plugin functions to automatically collect data\"};function b(t={}){let{wrapper:a}=t.components||{};return a?(0,e.jsx)(a,Object.assign({},t,{children:(0,e.jsx)(i,{})})):i();function i(){let n=Object.assign({h2:\"h2\",a:\"a\",span:\"span\",p:\"p\",img:\"img\",em:\"em\",ol:\"ol\",li:\"li\",pre:\"pre\",code:\"code\"},t.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsxs)(n.h2,{id:\"praise-for-the-amplitude-launch-extension\",children:[(0,e.jsx)(n.a,{href:\"#praise-for-the-amplitude-launch-extension\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Praise for the Amplitude Launch Extension\"]}),(0,e.jsxs)(n.p,{children:[\"I\\u2019ve been working on a few Amplitude deployments via Launch (aka data collection tags) lately and I am a huge fan of the Amplitude V2 extension. It does everything the \",(0,e.jsx)(n.a,{href:\"https://www.docs.developers.amplitude.com/data/sdks/typescript-browser/\",children:\"Amplitude Browser SDK\"}),\"does and the documentation links in it are all correct. There are even code samples within the custom code sections! This fact alone saved me a ton of time when setting up my deployment and writing the following plugin.\"]}),(0,e.jsx)(n.p,{children:(0,e.jsx)(n.img,{alt:\"amplitude extension\",src:\"https://images.ctfassets.net/on47yk52ubpi/81zB2SvWTPFJQkpbAHz1l/791c5af64382aafcd0a7f27945817c25/1_Qf2Lt8erW8Dm8GwaBzUC8Q.webp\"})}),(0,e.jsx)(\"figure\",{children:(0,e.jsx)(\"figcaption\",{children:\"Props (No Adobe pun intended) to whoever made this. My only request is being able to have different API keys based on Launch environment similar to the Acronym Gtag extension.\"})}),(0,e.jsxs)(n.p,{children:[\"Tracking an event with the Amplitude extension is pretty straight-forward. After selecting you conditions & criteria in a rule, you can add the \",(0,e.jsx)(n.em,{children:\"Track Event\"}),\" action to send \",(0,e.jsx)(n.em,{children:\"events\"}),\" and \",(0,e.jsx)(n.em,{children:\"event properties\"}),\" to Amplitude.\"]}),(0,e.jsx)(n.p,{children:(0,e.jsx)(n.img,{alt:\"amplitude track event\",src:\"https://images.ctfassets.net/on47yk52ubpi/KydH5D4n8eEVJrR4F2Poy/41d8964c45fb202a043b9522f8dae86b/1_oSrSiMky9Cfaasuj3QK2Fw.webp\"})}),(0,e.jsx)(\"figure\",{children:(0,e.jsx)(\"figcaption\",{children:\"Tracking a fake event and sending along some UTM data\"})}),(0,e.jsxs)(n.p,{children:[\"As you can see above, with any event you can manually add properties you want to send along with it. That\\u2019s all fine and good, but I know I\\u2019m going to need to send any and all UTMs with every Amplitude event. Enter \",(0,e.jsx)(n.a,{href:\"https://www.docs.developers.amplitude.com/data/sdks/typescript-browser/#plugins\",children:\"Amplitude Plugins.\"})]}),(0,e.jsx)(n.p,{children:(0,e.jsx)(n.em,{children:\"Note: I know Amplitude grabs UTMs automatically for attribution. However, I like seeing them on my events also. You could also use the same plugin code I use here to automatically grab any param(s) you need and have them automatically added every event.\"})}),(0,e.jsxs)(n.h2,{id:\"writing-and-adding-amplitude-plugins-in-launch\",children:[(0,e.jsx)(n.a,{href:\"#writing-and-adding-amplitude-plugins-in-launch\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Writing and Adding Amplitude Plugins in Launch\"]}),(0,e.jsxs)(n.p,{children:[\"For the time being, I am putting my Amplitude Plugins in the same rule where I \",(0,e.jsx)(n.em,{children:\"Initialize\"}),\" Amplitude. I like the idea of having all the setup type stuff in the same rule. Also, I don\\u2019t know specifically plugins should go. Either way, this seems to work \\u{1F601}\"]}),(0,e.jsx)(n.p,{children:(0,e.jsx)(n.img,{alt:\"launch rule amplitude\",src:\"https://images.ctfassets.net/on47yk52ubpi/1XputFNi1DghlLnmkF64hB/9c343e5838db273e3e4a761edfc843a1/1_LDgRWveBjthMrfIv0R2txg.webp\"})}),(0,e.jsx)(\"figure\",{children:(0,e.jsx)(\"figcaption\",{children:\"I add the plugin prior to initialization to ensure it is added to all events\"})}),(0,e.jsxs)(n.p,{children:[\"Inside the Add Plugin Action, click \",(0,e.jsx)(n.em,{children:\"Plugin Code\"}),\", and you\\u2019ll be treated to a nice commented out code example and link to documentation. Very helpful!\"]}),(0,e.jsx)(n.p,{children:(0,e.jsx)(n.img,{alt:\"amplitude launch add plugin\",src:\"https://images.ctfassets.net/on47yk52ubpi/5dLSG39hxI0hI6ABaMSjIf/d602610e5aaf36c91ad672a73eec3fd1/1_nGRFbv3U1bMNfw39MpStWg.webp\"})}),(0,e.jsx)(\"figure\",{children:(0,e.jsx)(\"figcaption\",{children:\"The little indicator lights turn green when there is code in there!\"})}),(0,e.jsx)(n.p,{children:(0,e.jsx)(n.img,{alt:\"amplitude sample code\",src:\"https://images.ctfassets.net/on47yk52ubpi/1mTwlsW3DBb9jh3LR0p6ZJ/4f8561a674b379e55d18274f85fb6e4a/1__bzmJJNp-ijddojxpuh_NA.webp\"})}),(0,e.jsx)(\"figure\",{children:(0,e.jsx)(\"figcaption\",{children:\"Example plugin code gives you an idea of how things work!\"})}),(0,e.jsx)(n.p,{children:(0,e.jsx)(n.img,{alt:\"amplitude plugin code launch\",src:\"https://images.ctfassets.net/on47yk52ubpi/1utwVdiVrILYCDZnv6M2LY/70c6a7726a99c6169eacce31a0a80fdb/1_ret6ePCS2265jrbaCBpG0w.webp\"})}),(0,e.jsx)(\"figure\",{children:(0,e.jsx)(\"figcaption\",{children:\"My plugin for automatically collecting UTM parameters\"})}),(0,e.jsx)(n.p,{children:\"Here is what\\u2019s going on line by line\"}),(0,e.jsxs)(n.ol,{start:\"2\",children:[(0,e.jsx)(n.li,{children:(0,e.jsx)(n.p,{children:\"give the plugin a name :)\"})}),(0,e.jsx)(n.li,{children:(0,e.jsx)(n.p,{children:\"Specify the type of plugin it is. This one is an enrichment plugin.\"})}),(0,e.jsx)(n.li,{children:(0,e.jsx)(n.p,{children:\"The setup function takes the Amplitude config, but since I don\\u2019t need to manipulate that I\\u2019m just doing a debug log and returning.\"})}),(0,e.jsx)(n.li,{children:(0,e.jsx)(n.p,{children:\"The execute function takes the Amplitude event as a parameter. It will look at every event that passes through Amplitude. If I needed to limit this plugin to only effect certain kinds of events (i.e. only pageviews and not logins, etc.) I could do that inside the function on the next line.\"})}),(0,e.jsx)(n.li,{children:(0,e.jsx)(n.p,{children:\"Grab all the query parameters of the current URL\"})}),(0,e.jsx)(n.li,{children:(0,e.jsx)(n.p,{children:\"Of the existing query parameters, filter out the non-UTM ones, and create and object of the ones that contain utm in their key\"})})]}),(0,e.jsx)(n.pre,{className:\"language-javascript\",children:(0,e.jsxs)(n.code,{className:\"language-javascript code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token comment\",children:\"// www.example.com?utm_content=ABC&foo=bar&utm_campaign=XYZ\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"const\"}),\" params \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"new\"}),\" \",(0,e.jsx)(n.span,{className:\"token class-name\",children:\"URLSearchParams\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token dom variable\",children:\"window\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token property-access\",children:\"location\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token property-access\",children:\"search\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token comment\",children:'// Array.from(params) = [[\"utm_content\", \"abc\"], [\"foo\", \"bar\"], [\"utm_campaign\", \"XYZ\"]]'}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token comment\",children:\"// remove non utms and create object\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"const\"}),\" utms \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token class-name known-class-name\",children:\"Object\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token property-access function method\",children:\"fromEntries\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token class-name known-class-name\",children:\"Array\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token keyword module\",children:\"from\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"params\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token property-access function method\",children:\"filter\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsxs)(n.span,{className:\"token parameter\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"[\"}),\"key\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"]\"})]}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator arrow\",children:\"=>\"}),\" key\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token property-access function method\",children:\"includes\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token string\",children:'\"utm\"'}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token comment\",children:'// utms = { utm_content: \"ABC\", utm_campaign: \"XYZ\" }'}),`\n`]})]})}),(0,e.jsxs)(n.ol,{start:\"11\",children:[(0,e.jsx)(n.li,{children:(0,e.jsx)(n.p,{children:\"Combines any existing properties the event has with the UTM ones. If I didn\\u2019t do this, and just assigned the utm object as the event properties, it would overwrite everything that was already in there and I don\\u2019t want that. I do get a warning from Launch here for using the spread operator. I don\\u2019t know how much of an issue that will be, but its something I will keep my eye on.\"})}),(0,e.jsx)(n.li,{children:(0,e.jsx)(n.p,{children:\"Return the event\"})})]}),(0,e.jsx)(n.p,{children:(0,e.jsx)(n.img,{alt:\"amplitude console logs\",src:\"https://images.ctfassets.net/on47yk52ubpi/23brJur5BvMkD4ZOR4cc9x/2c7add549970fffee760c58ff6941424/1_cqiyjuy91GeG6oEsA5AwJg.webp\"})}),(0,e.jsx)(\"figure\",{children:(0,e.jsx)(\"figcaption\",{children:\"Logs from adding the plugin\"})}),(0,e.jsxs)(n.h2,{id:\"in-action\",children:[(0,e.jsx)(n.a,{href:\"#in-action\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"In Action\"]}),(0,e.jsxs)(n.p,{children:[\"You can see what Amplitude is doing using the \",(0,e.jsx)(n.a,{href:\"https://chrome.google.com/webstore/detail/amplitude-event-explorer/acehfjhnmhbmgkedjmjlobpgdicnhkbp\",children:\"Amplitude Event Explorer Chrome Extension\"}),\" (Firefox version please!)\"]}),(0,e.jsxs)(n.p,{children:[\"In this case you can see when I track \",(0,e.jsx)(n.em,{children:\"myfakevent\"}),\" event, the utm parameters are added, but the foo parameter is not! The other data from \",(0,e.jsx)(n.em,{children:\"myfakeevent\"}),\" is also being passed because I am merging the existing event data with the utm data in the plugin code.\"]}),(0,e.jsx)(n.p,{children:(0,e.jsx)(n.img,{alt:\"amplitude debugger\",src:\"https://images.ctfassets.net/on47yk52ubpi/4woz742PpUgz5tQ1ID8Lfj/6145dffada563300d14d3a7fbe778616/1_fELTrwJP_OD6XTyMLoRjew.webp\"})}),(0,e.jsx)(\"figure\",{children:(0,e.jsx)(\"figcaption\",{children:\"The JS console represents what the track event Launch action does.\"})}),(0,e.jsx)(n.p,{children:\"I am loving the plugin functionality so far and look forward to using it to make my life easier. Also, based on some of the _satellite logs that the extension spits out, I suspect the Launch extension itself is heavily integrated with Amplitude plugins. If anyone from Amplitude reads this, can you confirm or deny?\"})]})}}var N=b;return y(v);})();\n;return Component;"
  },
  "_id": "blog/collecting-query-parameters-with-amplitude-in-adobe-launch.mdx",
  "_raw": {
    "sourceFilePath": "blog/collecting-query-parameters-with-amplitude-in-adobe-launch.mdx",
    "sourceFileName": "collecting-query-parameters-with-amplitude-in-adobe-launch.mdx",
    "sourceFileDir": "blog",
    "contentType": "mdx",
    "flattenedPath": "blog/collecting-query-parameters-with-amplitude-in-adobe-launch"
  },
  "type": "Blog",
  "readingTime": {
    "text": "5 min read",
    "minutes": 4.015,
    "time": 240900,
    "words": 803
  },
  "slug": "collecting-query-parameters-with-amplitude-in-adobe-launch",
  "toc": [
    {
      "value": "Praise for the Amplitude Launch Extension",
      "url": "#praise-for-the-amplitude-launch-extension",
      "depth": 2
    },
    {
      "value": "Writing and Adding Amplitude Plugins in Launch",
      "url": "#writing-and-adding-amplitude-plugins-in-launch",
      "depth": 2
    },
    {
      "value": "In Action",
      "url": "#in-action",
      "depth": 2
    }
  ]
}